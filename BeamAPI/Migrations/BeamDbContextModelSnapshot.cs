// <auto-generated />
using BeamAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeamAPI.Migrations
{
    [DbContext(typeof(BeamDbContext))]
    partial class BeamDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeamAPI.Models.Beam", b =>
                {
                    b.Property<int>("BeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("A")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BeamName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Span")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BeamId");

                    b.ToTable("Beams");
                });

            modelBuilder.Entity("BeamAPI.Models.BeamType", b =>
                {
                    b.Property<int>("BeamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeamId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("BeamTypeId");

                    b.HasIndex("BeamId");

                    b.HasIndex("TypeId");

                    b.ToTable("BeamTypes");
                });

            modelBuilder.Entity("BeamAPI.Models.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ForceType")
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Fy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FyUDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fy_EndLDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fy_StartLDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("M")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("XEndLDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("XEndUDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("XStartLDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("XStartUDL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Xm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Xp")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("BeamType", b =>
                {
                    b.Property<int>("BeamsBeamId")
                        .HasColumnType("int");

                    b.Property<int>("TypesTypeId")
                        .HasColumnType("int");

                    b.HasKey("BeamsBeamId", "TypesTypeId");

                    b.HasIndex("TypesTypeId");

                    b.ToTable("BeamType");
                });

            modelBuilder.Entity("BeamAPI.Models.BeamType", b =>
                {
                    b.HasOne("BeamAPI.Models.Beam", "Beam")
                        .WithMany("BeamTypes")
                        .HasForeignKey("BeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeamAPI.Models.Type", "Type")
                        .WithMany("BeamTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beam");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BeamType", b =>
                {
                    b.HasOne("BeamAPI.Models.Beam", null)
                        .WithMany()
                        .HasForeignKey("BeamsBeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeamAPI.Models.Type", null)
                        .WithMany()
                        .HasForeignKey("TypesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeamAPI.Models.Beam", b =>
                {
                    b.Navigation("BeamTypes");
                });

            modelBuilder.Entity("BeamAPI.Models.Type", b =>
                {
                    b.Navigation("BeamTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
